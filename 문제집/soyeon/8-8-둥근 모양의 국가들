# 둥근 모양의 국가들
원형으로 구분된 지역이 있는 나라아 있습니다. 어떤 지역은 다른 지역 내부에 있을 수도 있습니다.
하지만 지역의 경계가 교차하거나 접하는 일은 없습니다. 
목적지에 도착할 때까지 지나가는 최소한의 경계 수를 리턴해주세요.
두 위치 모두 경계 위에 있지는 않습니다.

##
그래프 형태로 변환

원의 경계를 넘는 행위는 원 안에서 밖으로 벗어나는 경우와 원 밖에서 안으로 들어가는 경우밖에 없습니다.
따라서 문제에서 발생할 수 있는 경우는
* 출발점과 목적지가 같은 원의 내부라면 경계를 넘을 필요가 없습니다.
* 출발점과 목적지가 모두 원 외부에 있어도 경계를 넘을 필요가 없습니다.
* 출발점과 목적지가 원의 내부와 외부에 각각 있다면 경계를 1번 넘어야 합니다.

이런 방식으로 원의 개수를 세면 답을 구할 수 있습니다.

```cpp
#include <vector>
using namespace std;

class CirclesCountry
{
	public:
	int leastBorders(vector <int> X, vector <int> Y, vector <int> R,int x1,int y1, int x2,int y2 )
	{
		int num = 0;

		for	(int i = 0; i < X.size(); i ++)
		{
			if(inside(X[i],Y[i],x1,y1,R[i]) != inside(X[i],Y[i],x2,y2,R[i]))
			// 점(x1,y1)이 원(X[i],Y[i],R[i]) 안에 있는지 없는지 != 점(x2,y2)가 원(X[i],Y[i],R[i]) 안에 있는지 없는지
			// 한 점은 원 안에 있고, 한 접은 원 밖에 있다면 경계를 한 번 넘는다.
				num++;
		}
		return num;
		// 총 넘은 경계의 수

		// 원의 중심과의 거리가 반경보다 작다면 원의 내부에 있는 것
		bool inside ( int x1, int y1, int x2, int y2, int r)
		{
			return (x1-x2)*(y1-y2)+(y1-y2)*(y1-y2) <= r*r
			// 점과 점사이의 거리 공식
			// 두 점의 거리가 원의 반지름보다 같거나 작으면 true
			// 두 점의 거리가 원의 반지름보다 크면 false
		}
	}
};
```
